=begin
#OpenAPI Documentation for Ejabberd HTTP APIs

#APIs for managing Ejabberd server

The version of the OpenAPI document: 1.0.0


OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for EjabberdHttpClient::RosterApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RosterApi' do
  before do
    # run before each test
    @api_instance = EjabberdHttpClient::RosterApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RosterApi' do
    it 'should create an instance of RosterApi' do
      expect(@api_instance).to be_instance_of(EjabberdHttpClient::RosterApi)
    end
  end

  # unit tests for add_roster_item
  # Add an item to a user&#39;s roster (supports ODBC). Groups can be multiple, separated by ; (e.g., g1;g2;g3).
  # @param add_roster_item_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_roster_item test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_roster
  # Get list of contacts in a local user roster.
  # @param get_offline_count_request
  # @param [Hash] opts the optional parameters
  # @return [Array<GetRoster200ResponseInner>]
  describe 'get_roster test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for process_roster_items
  # List/delete rosteritems that match filter.
  # @param [Hash] opts the optional parameters
  # @option opts [ProcessRosterItemsRequest] :process_roster_items_request
  # @return [Array<ProcessRosterItems200ResponseInner>]
  describe 'process_roster_items test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for push_all_to_all
  # Add all the users to all the users of Host in Group.
  # @param [Hash] opts the optional parameters
  # @option opts [PushAllToAllRequest] :push_all_to_all_request
  # @return [Integer]
  describe 'push_all_to_all test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for push_roster
  # Push template roster from file to a user.
  # @param [Hash] opts the optional parameters
  # @option opts [PushRosterRequest] :push_roster_request
  # @return [Integer]
  describe 'push_roster test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for push_roster_all
  # Push template roster from file to all those users.
  # @param [Hash] opts the optional parameters
  # @option opts [PushRosterAllRequest] :push_roster_all_request
  # @return [Integer]
  describe 'push_roster_all test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
