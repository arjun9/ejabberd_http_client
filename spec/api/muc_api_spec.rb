=begin
#OpenAPI Documentation for Ejabberd HTTP APIs

#APIs for managing Ejabberd server

The version of the OpenAPI document: 1.0.0


OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for EjabberdHttpClient::MucApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MucApi' do
  before do
    # run before each test
    @api_instance = EjabberdHttpClient::MucApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MucApi' do
    it 'should create an instance of MucApi' do
      expect(@api_instance).to be_instance_of(EjabberdHttpClient::MucApi)
    end
  end

  # unit tests for create_rooms_file
  # Create the rooms indicated in file.
  # @param create_rooms_file_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_rooms_file test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_rooms
  # Get the list of rooms where this user is occupant.
  # @param get_user_rooms_request
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_user_rooms test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_subscriptions
  # Get the list of rooms where this user is subscribed.
  # @param get_user_rooms_request
  # @param [Hash] opts the optional parameters
  # @return [Array<GetUserSubscriptions200ResponseInner>]
  describe 'get_user_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_muc_online_rooms
  # List existing rooms (&#39;global&#39; to get all vhosts).
  # @param list_muc_online_rooms_request
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'list_muc_online_rooms test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_muc_online_rooms_by_regex
  # List existing rooms (&#39;global&#39; to get all vhosts) by regex.
  # @param list_muc_online_rooms_by_regex_request
  # @param [Hash] opts the optional parameters
  # @return [Array<ListMucOnlineRoomsByRegex200ResponseInner>]
  describe 'list_muc_online_rooms_by_regex test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for register_muc_nick
  # Register a nick to a User JID in a MUC service.
  # @param register_muc_nick_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'register_muc_nick test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for rooms_empty_destroy
  # Destroy the rooms that have no messages in archive.
  # @param [Hash] opts the optional parameters
  # @option opts [RoomsEmptyDestroyRequest] :rooms_empty_destroy_request
  # @return [Array<String>]
  describe 'rooms_empty_destroy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for rooms_empty_list
  # List the rooms that have no messages in archive.
  # @param [Hash] opts the optional parameters
  # @option opts [RoomsEmptyDestroyRequest] :rooms_empty_destroy_request
  # @return [Array<String>]
  describe 'rooms_empty_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for rooms_unused_destroy
  # Destroy the rooms that are unused for many days in the service.
  # @param [Hash] opts the optional parameters
  # @option opts [RoomsUnusedDestroyRequest] :rooms_unused_destroy_request
  # @return [Array<String>]
  describe 'rooms_unused_destroy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for rooms_unused_list
  # List the rooms that are unused for many days in the service.
  # @param [Hash] opts the optional parameters
  # @option opts [RoomsUnusedDestroyRequest] :rooms_unused_destroy_request
  # @return [Array<String>]
  describe 'rooms_unused_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unregister_muc_nick
  # Unregister the nick registered by that account in the MUC service.
  # @param unregister_muc_nick_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unregister_muc_nick test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
