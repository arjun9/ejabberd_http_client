=begin
#OpenAPI Documentation for Ejabberd HTTP APIs

#APIs for managing Ejabberd server

The version of the OpenAPI document: 1.0.0


OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for EjabberdHttpClient::ServerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ServerApi' do
  before do
    # run before each test
    @api_instance = EjabberdHttpClient::ServerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ServerApi' do
    it 'should create an instance of ServerApi' do
      expect(@api_instance).to be_instance_of(EjabberdHttpClient::ServerApi)
    end
  end

  # unit tests for clear_cache
  # Clear database cache on all nodes.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_cache test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for gc
  # Force full garbage collection.
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'gc test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_status
  # Get status of the ejabberd server.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for halt
  # Halt ejabberd abruptly with status code 1.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'halt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for registered_vhosts
  # List all registered vhosts in SERVER.
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'registered_vhosts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for restart
  # Restart ejabberd gracefully.
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'restart test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for stop_ejabberd
  # Stop Ejabberd gracefully.
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'stop_ejabberd test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for stop_kindly
  # Inform users and rooms, wait, and stop the server.
  # @param [Hash] opts the optional parameters
  # @option opts [StopKindlyRequest] :stop_kindly_request
  # @return [Integer]
  describe 'stop_kindly test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_list
  # List modified modules that can be updated.
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'update_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_module
  # Update the given module or use the keyword &#39;all&#39;.
  # @param [Hash] opts the optional parameters
  # @option opts [CheckModuleRequest] :check_module_request
  # @return [String]
  describe 'update_module test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
