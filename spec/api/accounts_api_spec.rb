=begin
#OpenAPI Documentation for Ejabberd HTTP APIs

#APIs for managing Ejabberd server

The version of the OpenAPI document: 1.0.0


OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for EjabberdHttpClient::AccountsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AccountsApi' do
  before do
    # run before each test
    @api_instance = EjabberdHttpClient::AccountsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountsApi' do
    it 'should create an instance of AccountsApi' do
      expect(@api_instance).to be_instance_of(EjabberdHttpClient::AccountsApi)
    end
  end

  # unit tests for ban_account
  # Ban an account by kicking sessions and setting a random password.
  # @param ban_account_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'ban_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for change_password
  # Change the password of an account.
  # @param change_password_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'change_password test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for check_account
  # Check if an account exists or not.
  # @param check_account_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'check_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for check_password
  # Check if a password is correct for a given user and host.
  # @param check_password_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'check_password test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for check_password_hash
  # Check if the password hash for a user is correct. Allows hash methods from the Erlang/OTP crypto application.
  # @param check_password_hash_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'check_password_hash test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_old_users
  # Delete users that didn&#39;t log in last days, or that never logged.
  # @param delete_old_users_request
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'delete_old_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for register
  # Register a user.
  # @param [Hash] opts the optional parameters
  # @option opts [RegisterRequest] :register_request
  # @return [String]
  describe 'register test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for registered_users
  # List all registered users in HOST.
  # @param [Hash] opts the optional parameters
  # @option opts [RegisteredUsersRequest] :registered_users_request
  # @return [Array<String>]
  describe 'registered_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unban_ip
  # Remove banned IP addresses from the fail2ban table.
  # @param [Hash] opts the optional parameters
  # @option opts [UnbanIpRequest] :unban_ip_request
  # @return [UnbanIp200Response]
  describe 'unban_ip test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unregister_user
  # Unregister a user.
  # @param [Hash] opts the optional parameters
  # @option opts [UnregisterUserRequest] :unregister_user_request
  # @return [String]
  describe 'unregister_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
