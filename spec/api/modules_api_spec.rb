=begin
#OpenAPI Documentation for Ejabberd HTTP APIs

#APIs for managing Ejabberd server

The version of the OpenAPI document: 1.0.0


OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for EjabberdHttpClient::ModulesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ModulesApi' do
  before do
    # run before each test
    @api_instance = EjabberdHttpClient::ModulesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ModulesApi' do
    it 'should create an instance of ModulesApi' do
      expect(@api_instance).to be_instance_of(EjabberdHttpClient::ModulesApi)
    end
  end

  # unit tests for check_module
  # Check the contributed module repository compliance.
  # @param check_module_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'check_module test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for install_module
  # Compile, install and start an available contributed module.
  # @param check_module_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'install_module test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_available_modules
  # List the contributed modules available to install.
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, String>]
  describe 'list_available_modules test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_installed_modules
  # List the contributed modules already installed.
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, String>]
  describe 'list_installed_modules test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for uninstall_module
  # Uninstall a contributed module.
  # @param check_module_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'uninstall_module test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_module_specs
  # Update the module source code from Git.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_module_specs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for upgrade_module
  # Upgrade the running code of an installed module.
  # @param check_module_request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upgrade_module test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
